add_three <- function(first,second,third) {
first+second+third+3
}
add_three(1,2,3)
add_three <- function(input) {
input+3
}
add_three(2)
fruits <- substr(lyric, 15, nchar(lyric))
nchar(lyric)
lyric <- "I like to eat apples and bananas"
intro <- substr(lyric,1,13)
intro
fruits <- substr(lyric, 15, nchar(lyric))
fruits
?gsub
fruits_e <- gsub(ee,a,lyric)
fruits_e <- gsub("ee","a",lyric)
fruits_e
fruits_e <- gsub("ee","a",x)
fruits_e <- gsub("ee","a",lyric)
fruits_e
fruits_e <- gsub("a""ee",lyric)
fruits_e <- gsub("a","ee",lyric)
fruits_e
fruits_o <- gsub("a","o",fruits)
fruits_o
lyric_e <- print(substr(lyric,1,13), gsub("a","ee",fruits))
substr(lyric,1,13)
gsub("a","ee",fruits)
lyrics_e
lyric_e <- print( substr(lyric,1,13), gsub("a","ee",fruits) )
print(substr(lyric,1,13), gsub("a","ee",fruits))
print(substr(lyric,1,13)+ gsub("a","ee",fruits))
print(substr(lyric,1,13),gsub("a","ee",fruits))
print(substr(lyric,1,13), print(gsub("a","ee",fruits))
print(substr(lyric,1,13), print(gsub("a","ee",fruits))
lyircs_e <- print(substr(lyric,1,13), print(gsub("a","ee",fruits))
print(substr(lyric,1,13), print(gsub("a","ee",fruits))
lyrics_e <- print(substr(lyric,1,13)), print(gsub("a","ee",fruits))
print(substr(lyric,1,13)) print(gsub("a","ee",fruits))
print(substr(lyric,1,13)) print(gsub("a","ee",fruits))
print(substr(lyric,1,13)gsub("a","ee",fruits))
print(substr(lyric,1,13),gsub("a","ee",fruits))
substr(lyric,1,13),gsub("a","ee",fruits)
substr(lyric,1,13)gsub("a","ee",fruits)
substr(lyric,1,13), gsub("a","ee",fruits)
print(substr(lyric,1,13))
print(substr(lyric,1,13), gsub("a","ee",fruits))
print.default(substr(lyric, 1, 13), gsub("a", "ee", fruits))
print(gsub("a","ee",fruits))
print((substr(lyric,1,13)), print(gsub("a","ee",fruits))
print
print(w,2)
sentence <- c((substr(lyric,1,13),gsub("a","ee",fruits))
sentence <- c(substr(lyric,1,13),gsub("a","ee",fruits))
print(sentence)
sprintf(substr(lyric,1,13)) print(gsub("a","ee",fruits))
x<-1
y<- 2
print(x,y)
print(1)
print(x)
print(y)
print(x ,y)
print(x+y)
print(intro)
print(fruits_e)
print(intro,fruits_e)
sprintf(intro,fruits_e)
print(intro), print(fruits_e)
print(paste(intro,fruits_e))
print(paste(fruits_e))
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric,1,13)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
fruits <- substr(lyric, 15, nchar(lyric))
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub("a","ee",fruits)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub("a","o",fruits)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- print(substr(lyric,1,13)) print(gsub("a","ee",fruits))
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste(intro,fruits_e))
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(input) {
input+3
}
add_three(2)
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
ten
imperial_to_metric <- function(number_of_feet, number_of_inches) {
meters <- number_of_feet*.3048
meters <- number_of_inches*.0254
}
imperial_to_metric(20)
imperial_to_metric(20,10)
imperial_to_metric(20,10)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(number_of_feet, number_of_inches) {
meters <- number_of_feet*.3048
meters <- number_of_inches*.0254
return(meters)
}
imperial_to_metric(5.83,70)
imperial_to_metric(5.8333333,70)
imperial_to_metric(5.83,60)
imperial_to_metric(5.83,0)
imperial_to_metric(0,70)
imperial_to_metric(0,70)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(number_of_feet, number_of_inches) {
meters <- number_of_feet*.3048
or
meters <- number_of_inches*.0254
return(meters)
}
imperial_to_metric(0,70)
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5.83,70)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(number_of_feet, number_of_inches) {
meters <- number_of_feet*.3048
meters <- number_of_inches*.0254
return(meters)
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5.83,70)
height_in_meters
imperial_to_metric(5.83,10)
imperial_to_metric(10,70)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(number_of_feet, number_of_inches) {
meters_1 <- number_of_feet*.3048
meters_2 <- number_of_inches*.0254
return(sum(meters_1,meters_2))
}
imperial_to_metric(5,10)
imperial_to_metric(6,1)
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5.83,70)
height_in_meters
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5,10)
height_in_meters
